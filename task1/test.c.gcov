        -:    0:Source:test.c
        -:    0:Graph:test.gcno
        -:    0:Data:test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <malloc.h>
        -:    3:#include <sys/time.h>
        -:    4:#include <sys/resource.h>
        -:    5:#include <string.h>
        -:    6:#include <unistd.h>
        -:    7:
        -:    8:#include "list.h"
        -:    9:
        -:   10:#define PRINT_RES(res, tar) \
        -:   11:		if ((res) tar) \
        -:   12:			fprintf(stderr, "OK %d\n", __LINE__); \
        -:   13:		else \
        -:   14:			fprintf(stderr, "ERROR at \n%4d |%s\n",__LINE__, #res)
        -:   15:
        1:   16:int True(ListElem* elem, void* ctx)
        -:   17:{
        1:   18:	return 1;
        -:   19:}
        -:   20:
        1:   21:int main(int argc, char const *argv[])
        -:   22:{
        -:   23:	struct rlimit tmpold, tmpnew;
        1:   24:	getrlimit(RLIMIT_AS, &tmpold);
        1:   25:	tmpnew.rlim_cur = 0;
        1:   26:	tmpnew.rlim_max = tmpold.rlim_max;
        -:   27://--------------
        -:   28:/*
        -:   29:	setrlimit(RLIMIT_AS, &tmpnew);
        -:   30:
        -:   31:	ListElem* elemC = ListElemCtor(88);
        -:   32:	PRINT_RES(elemC, == NULL);
        -:   33:	List* listC = ListCtor();
        -:   34:	PRINT_RES(listC, == NULL);
        -:   35:
        -:   36:	setrlimit(RLIMIT_AS, &tmpold);
        -:   37:*/
        -:   38://-----------------------------
        1:   39:	FILE* out = fopen("2.dump", "w");
        1:   40:	PRINT_RES(out, != NULL);
        -:   41:
        1:   42:	ListElem* elem = ListElemCtor(45);
        1:   43:	PRINT_RES(elem, != NULL);
        1:   44:	ListElem* elemA = ListElemCtor(19);
        1:   45:	PRINT_RES(elemA, != NULL);
        1:   46:	ListElem* elemB = ListElemCtor(-98);
        1:   47:	PRINT_RES(elemB, != NULL);
        1:   48:	List* list = ListCtor();
        1:   49:	PRINT_RES(list, != NULL);
        -:   50:
        1:   51:	PRINT_RES(ListElemDump(elem, out), == 0);
        1:   52:	PRINT_RES(ListElemDump(NULL, out), == PTRERR);
        1:   53:	PRINT_RES(ListElemDump(elem, NULL), == PTRERR);
        1:   54:	PRINT_RES(ListDump(list, out), == 0);
        1:   55:	PRINT_RES(ListDump(NULL, out), == PTRERR);
        1:   56:	PRINT_RES(ForEach(NULL, NULL, NULL), == PTRERR);
        1:   57:	PRINT_RES(ForEach(list, True, NULL), == 0);
        1:   58:	PRINT_RES(ListAddHead(NULL, NULL), == PTRERR );
        1:   59:	PRINT_RES(ListAddTail(NULL, NULL), == PTRERR );
        1:   60:	PRINT_RES(ListAddAfter(NULL, NULL, NULL), == PTRERR );
        1:   61:	PRINT_RES(ListDelElem(list, NULL), == PTRERR) ;
        1:   62:	PRINT_RES(ListAddHead(list, elem), == 0);
        1:   63:	PRINT_RES(ListDelElem(list, elem), == 0);
        1:   64:	PRINT_RES(ListAddTail(list, elem), == 0);
        1:   65:	PRINT_RES(ListAddHead(list, elemA), == 0);
        1:   66:	PRINT_RES(ListAddTail(list, elemB), == 0);
        1:   67:	PRINT_RES(ListDelElem(list, elemB), == 0);
        1:   68:	PRINT_RES(ListAddTail(list, elemB), == 0);
        1:   69:	PRINT_RES(ListDelElem(list, elemA), == 0);
        1:   70:	PRINT_RES(ListAddHead(list, elemA), == 0);
        1:   71:	PRINT_RES(ListDelElem(list, elem), == 0);
        1:   72:	PRINT_RES(ListElemDtor(elem, NULL), == 0);
        1:   73:	PRINT_RES(ListElemDtor(NULL, NULL), == PTRERR);
        1:   74:	PRINT_RES(ListDump(list, out), == 0);
        1:   75:	PRINT_RES(ListDump(list, NULL), == PTRERR);
        1:   76:	PRINT_RES(ForEach(list, True, NULL), == 1);
        1:   77:	PRINT_RES(ListDtor(NULL), == PTRERR);
        1:   78:	PRINT_RES(ListDtor(list), == 0);
        1:   79:	PRINT_RES(fclose(out), == 0);
        -:   80:
        1:   81:	return 0;
        -:   82:}
